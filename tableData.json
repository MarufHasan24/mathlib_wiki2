{
  "age": {
    "title": "age",
    "input": {
      "data": ["year", "month", "date", "customDate (optional)"],
      "Type": [
        "Number",
        "Number",
        "Number",
        "an array contains [year,month,date]"
      ]
    },
    "work": {
      "Mwork": "calculate",
      "work": "gap between 2 dates (defult : current day to another day)"
    }
  },
  "average": {
    "title": "average",
    "input": {
      "data": ["2 or more"]
    },
    "work": {
      "Rtype": "an Array",
      "Mwork": "calculate",
      "work": "average"
    }
  },
  "c2Fr": {
    "title": "c2Fr",
    "input": {
      "data": ["number"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "celcius into fahrenheit"
    }
  },
  "caller": {
    "title": "caller",
    "input": {
      "data": ["numbers and unit together"],
      "Type": ["a string"]
    },
    "work": {
      "Mwork": "Call",
      "work": "right converter then convert"
    }
  },
  "combo": {
    "title": "combo",
    "des": "<sup>n</sup>C<sub>r</sub>",
    "input": {
      "data": ["n", "r"]
    },
    "work": {
      "Mwork": "Findout",
      "work": "combination of"
    }
  },
  "cm2In": {
    "title": "cm2In",
    "input": {
      "data": ["centimeter"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "centimeter into inch"
    }
  },
  "cosx": {
    "title": "cosx",
    "input": {
      "data": ["input"],
      "Type": ["a radian (type string) or degree (type number)"]
    },
    "work": {
      "Mwork": "findout",
      "work": "cos value of radian or degree"
    }
  },
  "cosec": {
    "title": "cosec",
    "input": {
      "data": ["radian"]
    },
    "work": {
      "Mwork": "findout",
      "work": "cosec value of radian"
    }
  },
  "cot": {
    "title": "cot",
    "input": {
      "data": ["radian"]
    },
    "work": {
      "Mwork": "findout",
      "work": "cot value of radian"
    }
  },
  "dememo": {
    "title": "dememo",
    "input": {
      "data": [
        "name (name of memory)",
        "asyncronise",
        "if it is asyncronise then callback"
      ],
      "Type": ["a string", "a boolearn", "a function"]
    },
    "work": {
      "Mwork": "Bring",
      "work": "memorised data from file system",
      "Rtype": "an Object contains expected data, date and time of saved data"
    }
  },
  "delmemo": {
    "title": "delmemo",
    "input": {
      "data": [
        "name of memory or 'ALL'",
        "asyncronise",
        "if it is asyncronise then callback"
      ],
      "Type": ["a string", "a boolearn", "a function"]
    },
    "work": {
      "Mwork": "delete",
      "work": "memorised data from file system",
      "Rtype": "<i>a confarmetion string</i>"
    }
  },
  "deg2Rad": {
    "title": "deg2Rad",
    "input": {
      "data": ["dgree"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "dgree into radian",
      "Rtype": "an Object "
    }
  },
  "fact": {
    "title": "fact",
    "input": {
      "data": ["number"],
      "Type": ["a natural number or 0 (like: 0,1,2,45,...)"]
    },
    "work": {
      "Mwork": "calculate",
      "work": "factorial like (9! = 1*2*3*4*5*6*7*8*9 = 362880) "
    }
  },
  "fr2C": {
    "title": "fr2C",
    "input": {
      "data": ["fahrenheit"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "fahrenheit into celcius"
    }
  },
  "ft2M": {
    "title": "ft2M",
    "input": {
      "data": ["feet"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "feet into meter"
    }
  },
  "fract": {
    "title": "fract",
    "input": {
      "data": ["input"],
      "Type": ["a float type number"]
    },
    "work": {
      "Mwork": "convert",
      "work": "decimal number into fractional number",
      "Rtype": "a string"
    }
  },
  "in2Cm": {
    "title": "in2Cm",
    "input": {
      "data": ["inch"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "inch to centimeter"
    }
  },
  "km2Mile": {
    "title": "km2Mile",
    "input": {
      "data": ["kilometer"]
    },
    "work": {
      "Mwork": "Convert",
      "work": "inch to centimeter"
    }
  },
  "leapYear": {
    "title": "leapYear",
    "input": {
      "data": ["year"]
    },
    "work": {
      "Mwork": "calculate",
      "work": "year is leapYear or not",
      "Rtype": "a boolearn "
    }
  },
  "linearEq": {
    "title": "linearEq",
    "des": "ax + by = c",
    "input": {
      "data": ["first_Equation", "second_Equation"],
      "Type": ["an array", "an array"]
    },
    "work": {
      "Mwork": "solve",
      "work": "equations",
      "Rtype": "an Array"
    }
  },
  "logx": {
    "title": "logx",
    "des": "log <sub>base</sub> angle",
    "input": {
      "data": ["base", "angle"],
      "Type": [
        "a number which is greater than 0 and not 1",
        "a number which is greater than 0"
      ]
    },
    "work": {
      "Mwork": "calculate",
      "work": "logarithom of custom base and angle"
    }
  },
  "memo": {
    "title": "memo",
    "input": {
      "data": [
        "number",
        "name (name of memory)",
        "asyncronise",
        "if it is asyncronise then a callback"
      ],
      "Type": ["a number or an array", "a string", "a boolearn", "a function"]
    },
    "work": {
      "Mwork": "memorise",
      "work": "a number or an array"
    }
  },
  "m2Ft": {
    "title": "m2Ft",
    "input": {
      "data": ["meter"]
    },
    "work": {
      "Mwork": "convert",
      "work": "feet"
    }
  },
  "mile2Km": {
    "title": "mile2Km",
    "input": {
      "data": ["mile"]
    },
    "work": {
      "Mwork": "convert",
      "work": "kilometer"
    }
  },
  "multiply": {
    "title": "multiply",
    "input": {
      "data": ["2 or more numbers"]
    },
    "work": {
      "Mwork": "multiply",
      "work": "numbers"
    }
  },
  "prime": {
    "title": "prime",
    "input": {
      "data": ["a Natural number"]
    },
    "work": {
      "Mwork": "check",
      "work": "number is odd or not",
      "Rtype": "a boolearn"
    }
  },
  "permut": {
    "title": "permut",
    "des": "<sup>n</sup>P<sub>r</sub>",
    "input": {
      "data": ["n", "r"]
    },
    "work": {
      "Mwork": "findout",
      "work": "the permutation between n and r"
    }
  },
  "polyArea": {
    "title": "polyArea",
    "des": "<i style=\"font-size:18px; color: red;\">arange the dots at anti-clockwise</i>",
    "input": {
      "data": ["dots (at least 3 arrays)"],
      "Type": [
        "an array contains the value of x coordinate and y coordinate. like : [x,y]"
      ]
    },
    "work": {
      "Mwork": "calculate",
      "work": "area between those dots"
    }
  },
  "dcm2Deg": {
    "title": "dcm2Deg",
    "input": {
      "data": ["decimal"]
    },
    "work": {
      "Mwork": "convert",
      "work": "decimal into degree"
    }
  },
  "deg2Dcm": {
    "title": "deg2Dcm",
    "input": {
      "data": ["degree"]
    },
    "work": {
      "Mwork": "convert",
      "work": "degree into decimal"
    }
  },
  "lineWidth": {
    "title": "lineWidth",
    "input": {
      "data": ["first_point", "second_point"],
      "Type": [
        "an array contains the value of x coordinate and y coordinate. like : [x,y]",
        "an array contains the value of x coordinate and y coordinate. like : [x,y]"
      ]
    },
    "work": {
      "Mwork": "measure",
      "work": "distance of that 2 dots"
    }
  }
}
